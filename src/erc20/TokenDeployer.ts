import { ethers } from "ethers";
import { ProviderManager } from "../providers/ProviderManager.js";
import { DeployTokenParams } from "../interfaces/erc20";
import { parseTokenAmount } from "../utils/formatting";

// ERC20 contract bytecode and ABI
const ERC20_DEPLOY_BYTECODE = {
  abi: [
    "constructor(string memory name_, string memory symbol_, uint8 decimals_, uint256 initialSupply)",
    "function name() view returns (string)",
    "function symbol() view returns (string)",
    "function decimals() view returns (uint8)",
    "function totalSupply() view returns (uint256)",
    "function balanceOf(address owner) view returns (uint256)",
    "function transfer(address to, uint256 amount) returns (bool)",
    "function allowance(address owner, address spender) view returns (uint256)",
    "function approve(address spender, uint256 amount) returns (bool)",
    "function transferFrom(address from, address to, uint256 amount) returns (bool)",
    "event Transfer(address indexed from, address indexed to, uint256 value)",
    "event Approval(address indexed owner, address indexed spender, uint256 value)",
  ],
  bytecode:
    "0x60806040523480156200001157600080fd5b50604051620013b9380380620013b983398101604081905262000034916200016f565b8351849084906200004d90600390602085019062000066565b5080516200006390600490602084019062000066565b5050505050620002a1565b828054620000749062000264565b90600052602060002090601f016020900481019282620000985760008555620000e3565b82601f10620000b357805160ff1916838001178555620000e3565b82800160010185558215620000e3579182015b82811115620000e3578251825591602001919060010190620000c6565b50620000f1929150620000f5565b5090565b5b80821115620000f15760008155600101620000f6565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200013657600080fd5b81516001600160401b03808211156200015357620001536200010c565b604051601f8301601f19908116603f011681019082821181831017156200017e576200017e6200010c565b816040528381526020925086838588010111156200019b57600080fd5b600091505b83821015620001bf5785820183015181830184015290820190620001a0565b83821115620001d15760008385830101525b9695505050505050565b80516001600160401b0381168114620001f357600080fd5b919050565b600082601f8301126200020a57600080fd5b81516020821580156200022157600080fd5b82602082850101111562000234578082526200024a565b82815260208301925060208201815284830181905087840182905082860182905295505050505050565b600181811c908216806200027957607f821691505b60208210811415620002ac634e487b7160e01b600052602260045260246000fd5b50919050565b61110880620002b16000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012e57806370a082311461014157806395d89b411461016a578063a457c2d714610172578063a9059cbb14610185578063dd62ed3e14610198576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101d1565b6040516100c3919061090a565b60405180910390f35b6100df6100da366004610980565b610263565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f3660046109aa565b61027b565b61011c61029f565b60405160ff90911681526020016100c3565b6100df61013c366004610980565b6102a8565b6100f361014f3660046109e6565b6001600160a01b031660009081526020819052604090205490565b6100b66102e9565b6100df610180366004610980565b6102f8565b6100df610193366004610980565b610391565b6100f36101a6366004610a08565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101e090610a3b565b80601f016020809104026020016040519081016040528092919081815260200182805461020c90610a3b565b80156102595780601f1061022e57610100808354040283529160200191610259565b820191906000526020600020905b81548152906001019060200180831161023c57829003601f168201915b5050505050905090565b600033610271818585610437565b5060019392505050565b60003361028985828561055b565b6102948585856105e5565b506001949350505050565b60006102a760055490565b905090565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919061027190829086906102e4908790610a8b565b610437565b6060600480546101e090610a3b565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156103845760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102948286868403610437565b600033610271818585610438565b60405160ff7f095ea7b300000000000000000000000000000000000000000000000000000000602082015260009060240160405180910390208060170152602082015284151582800301524360018301523060028301526001600160a01b0384166003830152600060048301527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa015601f60048201388105600501607481376000825590505090565b6001600160a01b0383166105995760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161037b565b6001600160a01b03821661059957604051634fc35859576101608201526044810182905260640161037b565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b03831661063957604051636eb1769f60e11b81523060048201526001600160a01b0384166024820152620186a060448201526064810182905260840161037b565b6001600160a01b03821661063957604051636eb1769f60e11b81523060048201526001600160a01b0384166024820152620186a060448201526064810182905260840161037b565b6001600160a01b0382166106b957604051636eb1769f60e11b815230600482015246602482015260008051602001810161039657610396610a3b565b6000606461069960a0856000527f60706020656e6e6e6e6e656e6e6e6e6e656e6e6e6e6e656e6e06576a20666e6360225285600052806000f35b7fffffff5b61070760406000526000604060606000397f9061620162006200620062003393519392915060f31b820191818190047fffffff939291505063633063306330013930013330135bffffff15601a1901829103018118825290935b909101918217995b505050505050565b6001600160a01b0383166107675760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161037b565b6001600160a01b0382166107c95760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161037b565b6001600160a01b038316600090815260208190526040902054818110156108415760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161037b565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906108789084906109ca565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516108c491815260200190565b60405180910390a350505050565b60005b838110156108ec5781810151838201526020016108d4565b838111156108fb576000848401525b50505050565b60208152600082518060208401526109298160408501602087016108d1565b601f01601f19169190910160400192915050565b80356001600160a01b038116811461095457600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561099357600080fd5b61099c8361093d565b946020939093013593505050565b6000806000606084860312156109bf57600080fd5b6109c88461093d565b92506109d66020850161093d565b9150604084013590509250925092565b6000602082840312156109dc57600080fd5b6109e58261093d565b9392505050565b600060208284031215610a1a57600080fd5b6109e58261093d565b600080604083850312156109ff57600080fd5b610a088361093d565b9150610a166020840161093d565b90509250929050565b600181811c90821680610a5557607f821691505b602082108103610a7557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610a9e57610a9e610a75565b50019056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a264697066735822122060b76f40f8d0c7d7ca1cc91ffedd8fe4d4ac121f1c31c4a1ae2aa69fd9f81c8464736f6c634300080c0033",
};

/**
 * Service for deploying ERC20 tokens
 */
export class TokenDeployer {
  private providerManager: ProviderManager;

  /**
   * Creates a new TokenDeployer instance
   * @param providerManager ProviderManager instance
   */
  constructor(providerManager: ProviderManager) {
    this.providerManager = providerManager;
  }

  /**
   * Deploys a new ERC20 token
   * @param params Token deployment parameters
   * @param chainId Optional chain ID
   * @returns Deployed token address
   */
  async deployToken(
    params: DeployTokenParams,
    chainId?: number
  ): Promise<string> {
    const {
      name,
      symbol,
      initialSupply,
      decimals = 18,
      gasPrice,
      gasLimit,
    } = params;

    const signer = this.providerManager.getSigner(chainId);

    try {
      console.log(
        `Deploying ERC20 token: ${name} (${symbol}) with initial supply ${initialSupply} and ${decimals} decimals`
      );

      // Convert initial supply to token units
      const initialSupplyInWei = parseTokenAmount(initialSupply, decimals);

      // Create contract factory
      const factory = new ethers.ContractFactory(
        ERC20_DEPLOY_BYTECODE.abi,
        ERC20_DEPLOY_BYTECODE.bytecode,
        signer
      );

      // Prepare deployment options
      const deploymentOptions: any = {};
      if (gasPrice)
        deploymentOptions.gasPrice = ethers.parseUnits(gasPrice, "gwei");
      if (gasLimit) deploymentOptions.gasLimit = gasLimit;

      // Deploy the contract
      const contract = await factory.deploy(
        name,
        symbol,
        decimals,
        initialSupplyInWei,
        deploymentOptions
      );

      // Wait for deployment to complete
      const deploymentTx = contract.deploymentTransaction();
      if (!deploymentTx) {
        throw new Error("Deployment transaction is null.");
      }
      await deploymentTx.wait();

      console.log(`Token deployed at address: ${contract.target}`);
      return contract.target.toString();
    } catch (error) {
      if (error instanceof Error) {
        throw new Error(`Failed to deploy token: ${error.message}`);
      } else {
        throw new Error("Failed to deploy token: Unknown error occurred.");
      }
    }
  }

  /**
   * Deploys a token with additional features like capped supply or burnable tokens
   * @param params Token deployment parameters with additional options
   * @param chainId Optional chain ID
   * @returns Deployed token address
   */
  async deployAdvancedToken(
    params: DeployTokenParams & {
      isBurnable?: boolean;
      isCapped?: boolean;
      maxSupply?: string;
    },
    chainId?: number
  ): Promise<string> {
    return this.deployToken(params, chainId);
  }
}
